[ExtractTextWebpackPlugin]

ref...
https://webpack.js.org/plugins/extract-text-webpack-plugin

[warning]
Since webpack v4,
the extract-text-webpack-plugin should not be used for CSS.
Use mini-css-extract-plugin instead.

/*
[extract-text-plugin]

> npm i -D extract-text-webpack-plugin

update webpack.config.js

const ExtractTextPlugin = require('extract-text-webpack-plugin');

replace

module: {
  rules: [
    ...
    {
      test: /\.css$/,
      use: ['style-loader', 'css-loader'],
      include: SRC_DIR
    }
  ]
}

with

module: {
  rules: [
    ...
    {
      test: /\.css$/,
      use: ExtractTextPlugin.extract ({
        fallback: 'style-loader',
        use: 'css-loader'
      }),
      include: SRC_DIR
    }
  ]
}

and then, add

plugins: [
  ...
  new ExtractTextPlugin ({
    filename: '[name].bundle.css',
    allChunks: true
  })
]

hasn't figured out what 'allChunks' is entirely,
but I know setting 'allChunks: true' makes all CSS not be embedded,
so just set 'allChunks: true' for now.

also, cuz no CSS are embedded,
fallback: 'style-loader' in ExtractTextPlugin.extract({}) seems not necessary,
but just keep it.

p.s.,
if we want to use [chunkhash] like JS bundles,
use [contenthash] instead cuz neither [hash] nor [chunkhash] work
when using the ExtractTextWebpackPlugin

that is,

plugins: [
  ...
  new ExtractTextPlugin ({
    filename: '[name].[contenthash].css',
    allChunks: true
  })
]
*/

-----

[MiniCssExtractPlugin]

it takes time to extract CSS
don't do it in dev,
only do it in prod

ref...
https://webpack.js.org/plugins/mini-css-extract-plugin/

> npm i -D mini-css-extract-plugin

* update webpack.prod.config.js
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = merge(base, {
  mode: "production",
  plugins: [
+   new MiniCssExtractPlugin ({
+     filename: '[name].[contentHash].css'
+   }),
    new CleanWebpackPlugin()
  ]
});

* move the rule from base to dev...

* update webpack.base.config.js
module.exports = {
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        include: SRC_DIR,
        use: ['babel-loader']
      },
-     {
-       test: /\.(css|scss|sass)$/, //test: /\.s[ac]ss$/i,
-       include: SRC_DIR,
-       use: [
-         'style-loader', // Creates 'style' nodes from JS strings.
-         'css-loader',   // Translates CSS into CommonJS.
-         'sass-loader'   // Compiles SASS to CSS.
-       ],
-     }
    ]
  },
};

* update webpack.dev.config.js
module.exports = merge(base, {
+ module: {
+   rules: [
+     {
+       test: /\.(css|scss|sass)$/, //test: /\.s[ac]ss$/i,
+       include: SRC_DIR,
+       use: [
+         'style-loader', // Creates 'style' nodes from JS strings.
+         'css-loader',   // Translates CSS into CommonJS.
+         'sass-loader'   // Compiles SASS to CSS.
+       ],
+     }
+   ]
+ }
});

* lastly, update webpack.prod.config.js again

+ const SRC_DIR = path.resolve(__dirname, 'src');

module.exports = merge(base, {
+ module: {
+   rules: [
+     {
+       test: /\.(css|scss|sass)$/, //test: /\.s[ac]ss$/i,
+       include: SRC_DIR,
+       use: [
+         MiniCssExtractPlugin.loader, // Extract CSS into files.
+         'css-loader',                // Translates CSS into CommonJS.
+         'sass-loader'                // Compiles SASS to CSS.
+       ],
+     }
+   ]
+ }
});

-----

[PostCSS (autoprefixer)]

> npm i -D autoprefixer postcss-loader

- add postcss.config.js (option 1)

module.exports = {
  plugins: [
    require('autoprefixer')
  ]
};

or

- update package.json (option 2)

"postcss": {
  "plugins": {
    "autoprefixer": {}
  }
},

(I prefer option 2)

- update webpack.config.js

replace

module: {
  rules: [
    ...
    {
      test: /\.(css|scss|sass)$/,
      use: ExtractTextPlugin.extract ({
        fallback: 'style-loader',
        use: ['css-loader', 'sass-loader']
      }),
      include: SRC_DIR
    }
  ]
}

with

module: {
  rules: [
    ...
    {
      test: /\.(css|scss|sass)$/,
      use: ExtractTextPlugin.extract ({
        fallback: 'style-loader',
        use: ['css-loader', 'postcss-loader', 'sass-loader']
      }),
      include: SRC_DIR
    }
  ]
}

- update package.json

add

"browserslist": [
  "> 1%",
  "ie > 9"
],

-----

[minify CSS]

there're 2 ways to minify CSS.

1. use css-loader options

- update webpack.config.js

replace

module: {
  rules: [
    ...
    {
      test: /\.(css|scss|sass)$/,
      use: ExtractTextPlugin.extract ({
        fallback: 'style-loader',
        use: ['css-loader', 'postcss-loader', 'sass-loader']
      }),
      include: SRC_DIR
    },
    ...
  ]
}

with

module: {
  rules: [
    ...
    {
      test: /\.(css|scss|sass)$/,
      use: ExtractTextPlugin.extract ({
        fallback: 'style-loader',
        use: [
          {
            loader: 'css-loader',
            options: {
              minimize: true
            }
          },
          'postcss-loader',
          'sass-loader'
        ]
      }),
      include: SRC_DIR
    },
    ...
  ]
}

2. use 'webpack -p' in package.json,
where -p switches webpack loaders to minimize mode.

see [build script] below for further explanation.

I prefer solution 2.
